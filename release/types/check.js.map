{"version":3,"file":"check.js","sourceRoot":"","sources":["../../src/types/check.ts"],"names":[],"mappings":";;AACA,kCAAsC;AAEzB,QAAA,gBAAgB,GAAG,UAAE,KAA+B;IAC/D,EAAE,CAAC,CAAE,QAAQ,KAAK,OAAO,KAAM,CAAC,CAChC,CAAC;QACC,MAAM,CAAC,mBAAW,CAAC,KAAK,CAAC,KAAK,mBAAW,CAAC,WAAW,CAAA;IACvD,CAAC;IACD,MAAM,CAAC,mBAAW,CAAC,WAAW,KAAK,KAAK,CAAA;AAC1C,CAAC,CAAA;AAEY,QAAA,aAAa,GAAG,UAAE,KAA+B;IAC5D,EAAE,CAAC,CAAE,QAAQ,KAAK,OAAO,KAAM,CAAC,CAChC,CAAC;QACC,MAAM,CAAC,mBAAW,CAAC,KAAK,CAAC,KAAK,mBAAW,CAAC,QAAQ,CAAA;IACpD,CAAC;IACD,MAAM,CAAC,mBAAW,CAAC,QAAQ,KAAK,KAAK,CAAA;AACvC,CAAC,CAAA;AAGY,QAAA,QAAQ,GAAG,UAAE,KAA+B;IACvD,EAAE,CAAC,CAAE,QAAQ,KAAK,OAAO,KAAM,CAAC,CAChC,CAAC;QACC,MAAM,CAAC,mBAAW,CAAC,KAAK,CAAC,KAAK,mBAAW,CAAC,GAAG,CAAA;IAC/C,CAAC;IACD,MAAM,CAAC,mBAAW,CAAC,GAAG,KAAK,KAAK,CAAA;AAClC,CAAC,CAAA;AAGY,QAAA,QAAQ,GAAG,UAAE,KAA+B;IACvD,EAAE,CAAC,CAAE,QAAQ,KAAK,OAAO,KAAM,CAAC,CAChC,CAAC;QACC,MAAM,CAAC,mBAAW,CAAC,KAAK,CAAC,KAAK,mBAAW,CAAC,GAAG,CAAA;IAC/C,CAAC;IACD,MAAM,CAAC,mBAAW,CAAC,GAAG,KAAK,KAAK,CAAA;AAClC,CAAC,CAAA;AAGY,QAAA,mBAAmB,GAAG,UAAE,KAA+B;IAClE,MAAM,CAAC,wBAAgB,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,CAAA;AACxD,CAAC,CAAA;AAEY,QAAA,sBAAsB,GAAG,UAAE,KAA+B;IACrE,MAAM,CAAC,gBAAQ,CAAC,KAAK,CAAC,IAAI,gBAAQ,CAAC,KAAK,CAAC,CAAA;AAC3C,CAAC,CAAA;AAEY,QAAA,kBAAkB,GAAG,UAAE,KAA+B;IACjE,MAAM,CAAC,gBAAQ,CAAC,KAAK,CAAC,IAAI,gBAAQ,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,CAAA;AACnE,CAAC,CAAA;AAEY,QAAA,sBAAsB,GAAG,UAAE,KAA+B;IACrE,MAAM,CAAC,gBAAQ,CAAC,KAAK,CAAC,IAAI,gBAAQ,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAA;AAC9F,CAAC,CAAA","sourcesContent":["import * as Types from './kio-content'\nimport { KioNodeType } from '../enums'\n\nexport const isCtnPublication = ( other:string|number|KioNodeType ):other is Types.KioCtnPublication => {\n  if ( 'string' === typeof other )\n  {\n    return KioNodeType[other] === KioNodeType.publication\n  }\n  return KioNodeType.publication === other\n}\n\nexport const isCtnFragment = ( other:string|number|KioNodeType ):other is Types.KioCtnFragment => {\n  if ( 'string' === typeof other )\n  {\n    return KioNodeType[other] === KioNodeType.fragment\n  }\n  return KioNodeType.fragment === other\n}\n\n\nexport const isCtnSrc = ( other:string|number|KioNodeType ):other is Types.KioCtnSrc => {\n  if ( 'string' === typeof other )\n  {\n    return KioNodeType[other] === KioNodeType.src\n  }\n  return KioNodeType.src === other\n}\n\n\nexport const isCtnTxt = ( other:string|number|KioNodeType ):other is Types.KioCtnTxt => {\n  if ( 'string' === typeof other )\n  {\n    return KioNodeType[other] === KioNodeType.txt\n  }\n  return KioNodeType.txt === other\n}\n\n\nexport const isNestedContentType = ( other:string|number|KioNodeType ): other is Types.KioNestedContentType => {\n  return isCtnPublication(other) || isCtnFragment(other)\n}\n\nexport const isPrimitiveContentType = ( other:string|number|KioNodeType ): other is Types.KioPrimitiveContentType => {\n  return isCtnSrc(other) || isCtnTxt(other)\n}\n\nexport const isChildContentType = ( other:string|number|KioNodeType ): other is Types.KioChildContentType => {\n  return isCtnSrc(other) || isCtnTxt(other) || isCtnFragment(other)\n}\n\nexport const isStructureContentType = ( other:string|number|KioNodeType ): other is Types.KioChildContentType => {\n  return isCtnSrc(other) || isCtnTxt(other) || isCtnFragment(other) || isCtnPublication(other)\n}"]}